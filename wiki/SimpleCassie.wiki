#labels Featured
Apache Cassandra PHP Client

== Introduction ==

SimpleCassie is entirely stand-alone package which wrap itself around Thrift libs (licensed to Apache Software Foundation).

== Usage ==
{{{
  <?php

  require_once('SimpleCassie.php');

  $cassie = new SimpleCassie(HOST, PORT);
  if(!$cassie->isConnected())
    throw new Exception('Couldn\'t connect to server');

  /*
  * setting new column (and key if not exist)
  * @return - (false) on failure
  */
   $cassie->keyspace('MyApp')->cf('Users')->key('user1')->column('name')->set('Marcin');
   $cassie->column('surname')->set('Rosinski');

  /*
  * delete column or row/key
  * @return - (false) on failure
  */

  //deleting column
  $cassie->key('user1')->column('name')->delete();

  //deleting row
  $cassie->key('user1')->delete();

   /*
  * count number of columns in row/key
  * @return - (int) on succes, false on failure
  */
  $count = $cassie->key('user2')->count();

  /*
  * getting single column
  * @return - object on succes,  null on failure
  */
  $name = $cassie->keyspace('Keyspace1')->cf('Standard1')->key('user1')->column('name')->get();

  /*
  * getting multiple columns
  * @return - array of objects on success, null on failure
  */
  $user = $cassie->column('name','surname')->get();

  /*
  * getting single column from multiple rows/keys
  * @return - array of objects on succes,  null on failure
  */
  $users = $cassie->key('user1','user2')->column('name')->get();

  /*
  * getting multiple columns from multiple rows/keys
  * @return - array of objects on succes,  null on failure
  */
  $users = $cassie->key('user1','user2')->column('name','username')->get();

  /*
  * getting slice of columns from single row/key
  * @return - array of objects on succes,  null on failure
  */
  $limit = 10;
  $reversed = false;
  $from_name = 'Puma';
  $to_name = 'Tiger';
  $friends = $cassie->key('user1friends')->column($from_name,$to_name)->slice($limit,$reversed);

  /*
  * getting slice of columns from single supercolumn row
  * @return - array of objects on succes,  null on failure
  */
  $limit = 10;
  $reversed = false;
  $friends = $cassie->key('user1')->supercolumn('friends')->column($from_name,$to_name)->slice($limit,$reversed);

  //resetting supercolumn for future use
  $cassie->key('user1')->supercolumn(null);

  /*
  * getting slice of columns from multiple rows/keys
  * @return - array of objects on succes,  null on failure
  */
  $limit = 10;
  $reversed = true;
  $friends = $cassie->key('user1friends','user2friends')->column($from_name,$to_name)->slice($limit,$reversed);

  /*
  * increment column value
  * @return - (int) new value on succes, false on failure
  */
  $new_value = $cassie->key('user1')->column('friends')->increment();

  /*
  * decrement column value
  * @return - (int) new value on succes, false on failure
  */
  $new_value = $cassie->key('user1')->column('friends')->decrement();

  ?>
}}}

== Development Roadmap ==
  * Connection Load Balancing
  * ->value() method for multiple rows/keys
  * ->timestamp() method for multiple rows/keys
  * ->delete() method for multiple rows/keys
  * ->increment() method for multiple rows/keys
  * ->decrement() method for multiple rows/keys

== Download Link ==
SimpleCassie.php download - http://simpletools-php.googlecode.com/files/SimpleCassie.zip